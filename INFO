Rust programs have 3 memory regions where data is stored:

    *	data memory - For data that is fixed in size and static (i.e. always available through life of program). Consider the text in your program (e.g. "Hello World!"): This text's bytes are only ever read from one place and therefore can be stored in this region. Compilers make lots of optimizations with this kind of data, and they are generally considered very fast to use since locations are known and fixed.

    *	stack memory - For data that is declared as variables within a function. The location of this memory never changes for the duration of a function call; because of this compilers can optimize code so stack data is very fast to access.

    *	heap memory - For data that is created while the application is running. Data in this region may be added, moved, removed, resized, etc. Because of its dynamic nature it's generally considered slower to use, but it allows for much more creative usages of memory. When data is added to this region we call it an allocation. When data is removed from this section we call it a deallocation.


Rust's rules for references might best be summarized by:

    Rust only allows there to be one mutable reference or multiple non-mutable references but not both.
    A reference must never live longer than its owner.

This doesn't tend to be a problem when passing around references to functions.

Memory details:

    The first rule of references prevents data races. What's a data race? A data race when reading from data has the possibility of being out of sync due to the existence of a writer to the data at the same time. This happens often in multi-threaded programming.
    The second rule of references prevents the misuse of references that refer to non-existent data (called dangling pointers in C).

What Is OOP?

Object oriented programming roughly refers to programming languages that have a number of iconic features:

    Encapsulation - Associating data and functions into the conceptual unit of a single type called an object.
    Abstraction - Hiding data and function members to obfuscate implementation details of an object.
    Polymorphism - The ability to interact with objects of different types through one interface.
    Inheritance - The ability to inherit data and behavior from other objects.

Rust Is Not OOP

Rust lacks inheritance of data and behavior in any meaningful way.

    Structs cannot inherit fields from a parent struct.
    Structs cannot inherit functions from a parent struct.

That said, Rust implements many programming language features, so that you might not mind this lacking.
